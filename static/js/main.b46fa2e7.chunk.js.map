{"version":3,"sources":["projects/binaryConverter/binaryConverter.js","projects/border-Radius-Previewer/radiusPreviewer.js","routes/routes.js","App.js","serviceWorker.js","history.js","index.js"],"names":["BinaryConverter","useState","binaryValue","setBinaryValue","decimalValue","setDecimalValue","className","id","placeholder","value","onChange","e","target","onClick","match","alert","parseInt","RadiusPreviewer","props","changeState","isNaN","setState","name","console","log","state","changeValues","bordertopleftradius","bordertoprightradius","borderbottomleftradius","borderbottomrightradius","this","htmlFor","type","onInput","style","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","Component","Routes","path","exact","sidebar","main","useStyles","makeStyles","theme","root","display","paper","background","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","subtitle","cursor","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","withRouter","history","classes","useTheme","React","open","setOpen","handleDrawerClose","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","edge","Typography","variant","noWrap","push","Drawer","anchor","onBlur","direction","Divider","List","map","route","index","ListItem","button","key","ListItemText","primary","component","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b46fa2e7.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-duplicate-props */\r\nimport React, { useState } from \"react\";\r\nimport \"./binaryConverter.scss\";\r\n\r\nconst BinaryConverter = () => {\r\n  const [binaryValue, setBinaryValue] = useState(\"\");\r\n  const [decimalValue, setDecimalValue] = useState(\"\");\r\n\r\n  function checkBinaryInput() {\r\n    const letters = /^[A-Za-z]+$/;\r\n    const numbersFromTwoToNine = /^[0-9]+$/;\r\n    const binaryNumbers = /^[01]+$/;\r\n\r\n    if (binaryValue.match(letters)) {\r\n      alert(\"Remove letters please\");\r\n      return false;\r\n    } else if (binaryValue.match(binaryNumbers)) {\r\n      setDecimalValue(parseInt(binaryValue, 2));\r\n    } else if (binaryValue.match(numbersFromTwoToNine)) {\r\n      alert(\"Remove numbers higher than 1 please\");\r\n      return false;\r\n    } else {\r\n      alert(\"Please enter a value\");\r\n    }\r\n  }\r\n\r\n  function Reset() {\r\n    setBinaryValue(\"\");\r\n    setDecimalValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"binary_container\">\r\n      <h1>Convert binary numbers</h1>\r\n      <div className=\"binary_input_container\">\r\n        <input\r\n          id=\"binary-input\"\r\n          placeholder=\"Binary input\"\r\n          value=\"\"\r\n          onChange={(e) => setBinaryValue(e.target.value)}\r\n          value={binaryValue}\r\n        />\r\n      </div>\r\n      <div className=\"button_container\">\r\n        <button onClick={checkBinaryInput}>Convert it</button>\r\n      </div>\r\n      <div className=\"binary_output_container\">\r\n        <input\r\n          id=\"binary-output\"\r\n          placeholder=\"Number output\"\r\n          value={decimalValue}\r\n        />\r\n      </div>\r\n      <div className=\"button_container\">\r\n        <button onClick={Reset}>Reset</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BinaryConverter;\r\n","import React, { Component } from \"react\";\r\nimport \"./radiusPreviewer.scss\";\r\n\r\nclass RadiusPreviewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      bordertopleftradius: 0,\r\n      bordertoprightradius: 0,\r\n      borderbottomleftradius: 0,\r\n      borderbottomrightradius: 0,\r\n      alert: false,\r\n    };\r\n  }\r\n\r\n  changeState = (e) => {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) {\r\n      this.setState({ [e.target.name]: 0, alert: false }, () => {\r\n        console.log(this.state);\r\n      });\r\n    } else if (value > 100) {\r\n      this.setState({ alert: true }, () => {\r\n        console.log(\"maximum value reached\");\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState({ [e.target.name]: value, alert: false }, () => {\r\n        console.log(this.state);\r\n      });\r\n    }\r\n  };\r\n\r\n  changeValues = (e) => {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) {\r\n      this.setState(\r\n        {\r\n          bordertopleftradius: 0,\r\n          bordertoprightradius: 0,\r\n          borderbottomleftradius: 0,\r\n          borderbottomrightradius: 0,\r\n          alert: false,\r\n        },\r\n        () => {\r\n          console.log(this.state);\r\n        }\r\n      );\r\n    } else if (value > 100) {\r\n      this.setState({ alert: true }, () => {\r\n        console.log(\"maximum value reached\");\r\n      });\r\n      return;\r\n    } else {\r\n      this.setState(\r\n        {\r\n          bordertopleftradius: value,\r\n          bordertoprightradius: value,\r\n          borderbottomleftradius: value,\r\n          borderbottomrightradius: value,\r\n          alert: false,\r\n        },\r\n        () => {\r\n          console.log(this.state);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      bordertopleftradius,\r\n      bordertoprightradius,\r\n      borderbottomleftradius,\r\n      borderbottomrightradius,\r\n      alert,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"previewer_container\">\r\n      <h1>Live border radius preview </h1>\r\n        <div className=\"code-preview-container\">\r\n          {/* Displayed code */}\r\n          <div className=\"values\">\r\n            <label htmlFor=\"bordertopleftradius\">border-top-left-radius</label>\r\n            <input\r\n              type=\"range\"\r\n              value={bordertopleftradius}\r\n              name=\"bordertopleftradius\"\r\n              onChange={(e) => this.changeState(e)}\r\n            ></input>\r\n\r\n            <label htmlFor=\"bordertoprightradius\">\r\n              border-top-right-radius\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              name=\"bordertoprightradius\"\r\n              value={bordertoprightradius}\r\n              onChange={(e) => this.changeState(e)}\r\n            ></input>\r\n\r\n            <label htmlFor=\"borderbottomleftradius\">\r\n              border-bottom-left-radius\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              name=\"borderbottomleftradius\"\r\n              value={borderbottomleftradius}\r\n              onChange={(e) => this.changeState(e)}\r\n            ></input>\r\n\r\n            <label htmlFor=\"borderbottomrightradius\">\r\n              border-bottom-right-radius\r\n            </label>\r\n            <input\r\n              type=\"range\"\r\n              name=\"borderbottomrightradius\"\r\n              value={borderbottomrightradius}\r\n              onChange={(e) => this.changeState(e)}\r\n            ></input>\r\n\r\n            <label htmlFor=\"setValues\">Set values</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"setValues\"\r\n              onInput={(e) => this.changeValues(e)}\r\n            ></input>\r\n            {alert ? <p>Maximum value is 100</p> : null}\r\n          </div>\r\n          <div className=\"valuesToCopy\">\r\n            <div className=\"clipboard\">\r\n              <span>border-top-left-radius : {bordertopleftradius}px</span>\r\n              <span>border-top-right-radius : {bordertoprightradius}px</span>\r\n              <span>\r\n                border-bottom-left-radius : {borderbottomrightradius}\r\n                px\r\n              </span>\r\n              <span>\r\n                border-bottom-right-radius : {borderbottomleftradius}\r\n                px\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-preview-container\">\r\n          <div\r\n            className=\"live-border\"\r\n            style={{\r\n              borderTopLeftRadius: `${bordertopleftradius}px`,\r\n              borderTopRightRadius: `${bordertoprightradius}px`,\r\n              borderBottomLeftRadius: `${borderbottomleftradius}px`,\r\n              borderBottomRightRadius: `${borderbottomrightradius}px`,\r\n            }}\r\n          >\r\n            Live Border-Radius\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RadiusPreviewer;\r\n","import React from \"react\";\r\nimport BinaryConverter from \"../projects/binaryConverter/binaryConverter.js\";\r\nimport RadiusPreviewer from '../projects/border-Radius-Previewer/radiusPreviewer.js'\r\n\r\nconst Routes = [\r\n  {\r\n    path: \"/binaryConverter\",\r\n    exact: true,\r\n    sidebar: \"Binary converter\",\r\n    main: () => <BinaryConverter/>,\r\n  },\r\n  {\r\n    path: \"/borderRadiusPreviewer\",\r\n    exact: true,\r\n    sidebar: \"Border Radius Previewer\",\r\n    main: () => <RadiusPreviewer/>,\r\n  }\r\n];\r\n\r\nexport default Routes;\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport Routes from \"./routes/routes.js\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  paper: {\r\n    background: \"red\",\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  subtitle: {\r\n    marginLeft: \"5vw\",\r\n    cursor: \"pointer\",\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nfunction App({ history }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, classes.paper, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h5\" noWrap>\r\n            List of projects\r\n          </Typography>\r\n          <Typography\r\n            className={classes.subtitle}\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"h6\"\r\n            noWrap\r\n          >\r\n            Why?\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose} onBlur={handleDrawerClose}>\r\n            {theme.direction === \"ltr\" ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {Routes.map((route, index) => (\r\n            <ListItem button key={index}>\r\n              <ListItemText\r\n                primary={route.sidebar}\r\n                onClick={() => history.push(`${route.path}`)}\r\n              />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <Switch>\r\n          {Routes.map((route, index) => {\r\n            return (\r\n              <Route\r\n                key={index}\r\n                exact={route.exact}\r\n                path={`${route.path}`}\r\n                component={route.main}\r\n              />\r\n            );\r\n          })}\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport history from \"./history\";\r\nimport { Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}